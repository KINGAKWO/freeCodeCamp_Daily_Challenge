                    """camelCase"""
Given a string, return its camel case version using the following rules:
Words in the string argument are separated by one or more characters from the following set: space ( ), dash (-), or underscore (_). Treat any sequence of these as a word break.
The first word should be all lowercase.
Each subsequent word should start with an uppercase letter, with the rest of it lowercase.
All spaces and separators should be removed.

""" My Thought Process"""
""Initial approach:""

Turn letters after separators into uppercase and lowercase the rest.

Use strip() to remove unwanted characters.

❌ Problem: strip() only removes leading/trailing separators, not the ones in the middle.

""Refinement:""

Learned about regex split (re.split(r"[ _-]+", s)) to handle all separators at once.

This handles multiple consecutive separators neatly.

""Debugging & logical errors:""

Step 2: using print() instead of return → failed all FreeCodeCamp tests.

Fixed by returning the final camelCase string.

Step 2: only uppercasing the first character of later words was incomplete → needed to combine first letter + lowercase rest.

""Edge-case handling:""

Leading/trailing separators → filtered empty strings using a list comprehension: [w for w in ... if w].

Confirmed correct output for tricky inputs like "__PYTHON---IS___FUN__" → "pythonIsFun"


"""Key takeaways:"""

Regex is powerful for handling complex string patterns.

return vs print: always use return when your function is producing a result to be tested or reused.

Step-by-step building of strings and careful handling of edge cases are crucial.

Debugging failures is a learning opportunity — every test tells a story.